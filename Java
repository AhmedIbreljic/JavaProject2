import java.util.stream.Collectors; 
import java.util.*;  
import java.lang.Math;

final class Main {
  public static void main(String[] args) {

    int test_num = 0;
    playground();

    System.out.println("~~~~~~~~~~~ TEST "+(++test_num)+" ~~~~~~~~~~~");
    test1();
    System.out.println();
    System.out.println("~~~~~~~~~~~ TEST "+(++test_num)+" ~~~~~~~~~~~");
    test2();
    System.out.println();
    System.out.println("~~~~~~~~~~~ TEST "+(++test_num)+" ~~~~~~~~~~~");
    test3();
    System.out.println();
    System.out.println("~~~~~~~~~~~ TEST "+(++test_num)+" ~~~~~~~~~~~");
    test4();
    System.out.println(); 
    System.out.println("~~~~~~~~~~~ TEST "+(++test_num)+" ~~~~~~~~~~~");
    test5();
    System.out.println(); 
    System.out.println("~~~~~~~~~~~ TEST "+(++test_num)+" ~~~~~~~~~~~");
    test6();
    System.out.println();
    System.out.println("~~~~~~~~~~~ TEST "+(++test_num)+" ~~~~~~~~~~~");
    test7();
    System.out.println();
    System.out.println("~~~~~~~~~~~ TEST "+(++test_num)+" ~~~~~~~~~~~");
    test8();
    System.out.println();
    System.out.println("~~~~~~~~~~~ TEST "+(++test_num)+" ~~~~~~~~~~~");
    test9();
    System.out.println();
  }

  public static void playground(){

    LinePrinter line_printer = new LinePrinter("OLIO", 5);
    line_printer.addNumber(1.2);
    line_printer.addNumber(2.4);
    line_printer.addNumber(3.3);
    line_printer.addNumber(4.1);
    line_printer.addNumber(3.6);
    String answer = line_printer.toString();
    System.out.println(answer);    
  }

  public static void test1(){
    /*
      The goal of this test is to:
        1) Test your constructor when only passing an integer in
        2) Test the toString method when passing a string in
        3) Test adding the correct number of lines
    */
    LinePrinter line_printer = new LinePrinter(5);
    line_printer.addNumber(1.2);
    line_printer.addNumber(2.4);
    line_printer.addNumber(3.3);
    line_printer.addNumber(4.1);
    line_printer.addNumber(3.6);
    String answer = line_printer.toString("*");

    String correctAnswer =  generateAnswer(5, "*",
      new Double[]{1.2, 2.4, 3.3, 4.1, 3.6});
    evaluateStudentAnswer(answer, correctAnswer);
  }

    public static void test2(){
    /*
      The goal of this test is to:
        1) Test your constructor when only passing an integer in
        2) Test the toString method when passing a string in
        3) Test adding the too many lines
    */
    LinePrinter line_printer = new LinePrinter(5);
    line_printer.addNumber(10.2);
    line_printer.addNumber(2.4);
    line_printer.addNumber(3.3);
    line_printer.addNumber(4.1);
    line_printer.addNumber(10.9);
    line_printer.addNumber(12.6);
    String answer = line_printer.toString("|");

    String correctAnswer =  generateAnswer(5, "|",
      new Double[]{10.2, 2.4, 3.3, 4.1, 10.9, 99.6});
    evaluateStudentAnswer(answer, correctAnswer);
  }

  public static void test3(){
    /*
      The goal of this test is to:
        1) Test your constructor when passing nothing in
        2) Test the toString method when passing a string in
        3) Test adding the too many lines
        4) Test the setInputNumber method after input accepted
    */
    LinePrinter line_printer = new LinePrinter();
    line_printer.addNumber(10.2);
    line_printer.addNumber(2.4);
    line_printer.setInputNumber(4);
    line_printer.addNumber(3.3);
    line_printer.addNumber(4.1);
    line_printer.addNumber(10.9);
    line_printer.addNumber(3.6);
    String answer = line_printer.toString("%");

    String correctAnswer =  generateAnswer(2, 4, "%",
      new Double[]{10.2, 2.4, 3.3, 4.1, 10.9, 3.6});
    evaluateStudentAnswer(answer, correctAnswer);
  }

  public static void test4(){
    /*
      The goal of this test is to:
        1) Test your constructor when passing a string in
        2) Test the toString method when passing nothing
        3) Test adding too many lines
        4) Test the setInputNumber method
    */
    LinePrinter line_printer = new LinePrinter("#");
    line_printer.setInputNumber(4);
    line_printer.addNumber(1.2);
    line_printer.addNumber(2.4);
    line_printer.addNumber(3.3);
    line_printer.addNumber(4.1);
    line_printer.addNumber(10.9);
    line_printer.addNumber(3.6);
    String answer = line_printer.toString();

    String correctAnswer =  generateAnswer(4, "#",
      new Double[]{1.2, 2.4, 3.3, 4.1, 10.9, 3.6});
    evaluateStudentAnswer(answer, correctAnswer);
  }

  public static void test5(){
    /*
      The goal of this test is to:
        1) Test your constructor when passing nothing
        2) Test the toString method when passing nothing
        3) Test adding the too many lines
        4) Test the setInputNumber method before input accepted
    */
    LinePrinter line_printer = new LinePrinter();
    line_printer.setInputNumber(4);
    line_printer.addNumber(1.2);
    line_printer.addNumber(2.4);
    line_printer.addNumber(3.3);
    line_printer.addNumber(4.1);
    line_printer.addNumber(10.9);
    line_printer.addNumber(3.6);
    String answer = line_printer.toString();

    String correctAnswer =  generateAnswer(4, "",
      new Double[]{1.2, 2.4, 3.3, 4.1, 10.9, 3.6});
    evaluateStudentAnswer(answer, correctAnswer);
  }

  public static void test6(){
    /*
      The goal of this test is to:
        1) Test your constructor when passing a string and number
        2) Test the toString method when passing nothing
    */
    LinePrinter line_printer = new LinePrinter("OLIO", 5);
    line_printer.addNumber(1.2);
    line_printer.addNumber(2.4);
    line_printer.addNumber(3.3);
    line_printer.addNumber(4.1);
    line_printer.addNumber(3.6);
    String answer = line_printer.toString();

    String correctAnswer =  generateAnswer(5, "OLIO",
      new Double[]{1.2, 2.4, 3.3, 4.1, 3.6});
    evaluateStudentAnswer(answer, correctAnswer);
  }

  public static void test7(){
    /*
      The goal of this test is to:
        1) Test your constructor when passing a string and number
        2) Test the toString method when passing nothing
        3) test overriding Input Number
    */
    LinePrinter line_printer = new LinePrinter("$", 5);
    line_printer.setInputNumber(4);
    line_printer.addNumber(1.2);
    line_printer.addNumber(2.4);
    line_printer.addNumber(3.3);
    line_printer.addNumber(4.1);
    line_printer.addNumber(3.6);
    String answer = line_printer.toString();

    String correctAnswer =  generateAnswer(4, "$",
      new Double[]{1.2, 2.4, 3.3, 4.1, 3.6});
    evaluateStudentAnswer(answer, correctAnswer);
  }


  public static void test8(){
    /*
      The goal of this test is to:
        1) Test your constructor when passing a string and number
        2) Test the toString method when passing nothing
        3) test overriding Input String
    */
    LinePrinter line_printer = new LinePrinter("$", 5);
    line_printer.setString(":)");
    line_printer.addNumber(1.2);
    line_printer.addNumber(2.4);
    line_printer.addNumber(3.3);
    line_printer.addNumber(4.1);
    line_printer.addNumber(3.6);
    String answer = line_printer.toString();

    String correctAnswer =  generateAnswer(5, ":)",
      new Double[]{1.2, 2.4, 3.3, 4.1, 3.6});
    evaluateStudentAnswer(answer, correctAnswer);
  }

  public static void test9(){
    /*
      The goal of this test is to:
        1) Test your constructor when passing a string and number
        2) Test the toString method when passing a string
        3) test overriding Input String via toString
    */
    LinePrinter line_printer = new LinePrinter("$", 5);
    line_printer.addNumber(1.2);
    line_printer.addNumber(2.4);
    line_printer.addNumber(3.3);
    line_printer.addNumber(4.1);
    line_printer.addNumber(3.6);
    String answer = line_printer.toString(":(");

    String correctAnswer =  generateAnswer(5, ":(",
      new Double[]{1.2, 2.4, 3.3, 4.1, 3.6});
    evaluateStudentAnswer(answer, correctAnswer);
  }


  /*
    Read below here only for fun :)
  */
  public static void evaluateStudentAnswer(String studentAnswer,
    String trueAnswer){
      if(studentAnswer.equals(trueAnswer)){
        System.out.println("Correct!");
      }else{
        System.out.println("Incorrect!");
        System.out.println("Your answer");
        System.out.println(studentAnswer);
        System.out.println("Correct answer");
        System.out.println(trueAnswer);
        String[] trueAnswerSplit = trueAnswer.split("\n");
        String[] studentAnswerSplit = studentAnswer.split("\n");
        int to_iter = Math.min(studentAnswerSplit.length, trueAnswerSplit.length);
        for(int i = 0; i < to_iter; i++){
          PrintDifferences(i, studentAnswerSplit[i], trueAnswerSplit[i]);
        }
        int diff = studentAnswerSplit.length - trueAnswerSplit.length;
        if(diff > 0){
          System.out.println("You have " +diff+ " too many lines");
        }else if (diff < 0){
          System.out.println("You have " +(-1 * diff)+ " too few lines");
        }
        if(studentAnswer.endsWith("\n")){
          System.out.println("Your answer cannot end with '\\n' character");
        }
      }
  }

  public static void PrintDifferences(int lineNum, String one, String two){

    // Implements the Levenshtein distance 
    int[][] dist = new int[one.length()][two.length()];
    for(int i = 0; i < one.length(); i++){
      dist[i][0] = i;
    }
    for(int j = 0; j < two.length(); j++){
      dist[0][j] = j;
    }

    for(int j = 1; j < two.length(); j++){
      for(int i = 1; i < one.length(); i++){
          int cost = 0;
          if(one.charAt(i) != two.charAt(j)){
            cost += 1;
          }
          dist[i][j] = Math.min(Math.min(dist[i-1][j] + 1, dist[i][j-1] + 1),
            dist[i-1][j-1] + cost);
      }
    }

    // Walk the distance matrix to give feedback on string deltas.
    int j = two.length()-1;
    int i = one.length()-1;
    while(true){
      if(i-1 < 0 || j-1 < 0){
        // base case for stopping iteration
        break;
      }
      int which =  Math.min(Math.min(dist[i-1][j], dist[i][j-1]), dist[i-1][j-1]);
      String char_one = String.valueOf(one.charAt(i));
      String char_two = String.valueOf(two.charAt(j));
      if(char_one.equals("\n")){
        char_one = "\\n";
      }
      if(char_two.equals("\n")){
        char_two = "\\n";
      }
      if(which == dist[i-1][j-1]){
        if(dist[i-1][j-1] != dist[i][j]){
          System.out.println("On Line Number " + (lineNum+1) + ", You Inserted "+ char_one + " at character number "+(i+1) + " Instead of char " + char_two);
        }
        i--;
        j--;
      }else if(which == dist[i-1][j]){
        System.out.println("On Line Number " + (lineNum+1) + ", You Inserted "+ char_one + " at character number "+(i+1));
        i--;
      }else if(which == dist[i][j-1]){
        System.out.println("On Line Number " + (lineNum+1) +", You do not have "+ char_one + " at character number "+(i+1));
        j--;
      }
    }
  }

  public static String generateAnswer(int num_inputs,
    String to_print,
    Double[] inputs)
  {
    return generateAnswer(0, num_inputs, to_print, inputs);
  }

  public static String generateAnswer(int num_skips, int num_inputs,
    String to_print, Double[] inputs){
      // here be λ dragons. Similar answers are illegal in your answer.
      return Arrays.asList(new Integer[]{1,3,5,7,11})
      .stream()
      .map(i -> Collections.nCopies(Arrays
        .asList(inputs)
        .stream()
        .skip(num_skips)
        .limit(num_inputs)
        .reduce(0.0, Double::sum).intValue()/i, to_print))
      .map(s -> String.join("", s))
      .collect(Collectors.joining("\n"));
    }

}
